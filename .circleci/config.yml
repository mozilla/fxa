version: 2.1

parameters:
  enable_test_pull_request:
    type: boolean
    default: true
  enable_production_smoke_tests:
    type: boolean
    default: false
  enable_stage_smoke_tests:
    type: boolean
    default: false
  enable_deploy_packages:
    type: boolean
    default: true
  enable_deploy_ci_images:
    type: boolean
    default: true
  enable_deploy_story_book:
    type: boolean
    default: true
  enable_test_and_deploy_tag:
    type: boolean
    default: true
  enable_nightly:
    type: boolean
    default: true
  force-deploy-fxa-ci-images:
    type: boolean
    default: false


orbs:
  browser-tools: circleci/browser-tools@1.2.3
  jira: circleci/jira@1.3.1


executors:
  # Default node executor with low resources. Useful for running quick / small tasks
  tiny-executor:
    resource_class: small
    docker:
      - image: cimg/node:18.14

  # For creating docker builds
  docker-build-executor:
    parameters:
      resource_class:
        type: string
        default: medium
      image:
        type: string
        default: cimg/node:18.14
    resource_class: << parameters.resource_class >>
    docker:
      - image: << parameters.image >>
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      # Note, the global cache is enabled, because otherwise two caches are created, one in .yarn/berry and one in .yarn/cache.
      # Turning this on results in a single cache - .yarn/berry
      YARN_ENABLE_GLOBAL_CACHE: true
      # Enabling hard links saves about 1.2 GB of space in the image.
      YARN_NM_MODE: hardlinks-global

  # Contains prebuilt image with low install overhead. Perfect for the first build
  # step, and the saving the initial a workspace state.
  build-executor:
    docker:
      - image: mozilla/fxa-circleci:ci-builder
    environment:
      NODE_ENV: development
      FIRESTORE_EMULATOR_HOST: localhost:9090

  # Contains minimal image for running common jobs like linting or unit tests.
  # This image requires a restored workspace state.
  default-executor:
    parameters:
      resource_class:
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    docker:
      - image: mozilla/fxa-circleci:ci-test-runner
    environment:
      NODE_ENV: development
      FIRESTORE_EMULATOR_HOST: localhost:9090

  # A minimal image for anything job needs infrastructure. Perfect for integration tests.
  # This image requires a restored workspace state.
  fullstack-executor:
    parameters:
      resource_class:
        type: string
        default: large
    resource_class: << parameters.resource_class >>
    docker:
      - image: mozilla/fxa-circleci:ci-test-runner
      - image: cimg/mysql:8.0.28
        command: --default-authentication-plugin=mysql_native_password
      - image: jdlk7/firestore-emulator
      - image: memcached
      - image: redis
    environment:
      NODE_ENV: development
      FIRESTORE_EMULATOR_HOST: localhost:9090

  # For anything that needs a full stack to run and needs browsers available for
  # ui test automation. This image requires a restored workspace state.
  functional-test-executor:
    parameters:
      resource_class:
        type: string
        default: large
    resource_class: << parameters.resource_class >>
    docker:
      - image: mozilla/fxa-circleci:ci-functional-test-runner
      - image: redis
      - image: memcached
      - image: pafortin/goaws
      - image: cimg/mysql:8.0.28
        command: --default-authentication-plugin=mysql_native_password
      - image: jdlk7/firestore-emulator
    environment:
      NODE_ENV: development
      FXA_EMAIL_ENV: development
      FXA_EMAIL_LOG_LEVEL: debug
      RUST_BACKTRACE: 1
      AUTH_FIRESTORE_EMULATOR_HOST: localhost:9090
      # Needed for sub plat playwright tests
      SUBSCRIPTIONS_PAYPAL_ENABLED: true
      PAYPAL_SANDBOX: true
      FXA_MX_RECORD_EXCLUSIONS: restmail.dev.lcip.org
      # Needed for react conversion playwright tests
      REACT_CONVERSION_SIMPLE_ROUTES: true
      REACT_CONVERSION_RESET_PASSWORD_ROUTES: true
      REACT_CONVERSION_OAUTH_ROUTES: true
      REACT_CONVERSION_SIGNIN_ROUTES: true
      REACT_CONVERSION_SIGNUP_ROUTES: true
      REACT_CONVERSION_PAIR_ROUTES: true
      REACT_CONVERSION_POST_VERIFY_ADD_RECOVERY_KEY_ROUTES: true
      REACT_CONVERSION_POST_VERIFY_CAD_VIA_QR_ROUTES: true
      REACT_CONVERSION_SIGNIN_VERIFICATION_VIA_PUSH_ROUTES: true

  # Contains a pre-installed fxa stack and browsers for doing ui test
  # automation. Perfect for running smoke tests against remote targets.
  smoke-test-executor:
    parameters:
      resource_class:
        type: string
        default: medium+
    resource_class: << parameters.resource_class >>
    docker:
      - image: mozilla/fxa-circleci:ci-functional-test-runner
    environment:
      NODE_ENV: development


commands:

  git-clone:
    # Note: Cloning this way allows us to run a git fetch & checkout later on download the road. This type of
    # clone operation will result in a .git/config with no user attached that is using
    # https://github.com/mozilla/fxa for the remote origin.
    # The --depth argument is used to drastically cut down the initial download size. The size
    # of the git folder is also much smaller, which ultimately results in smaller docker images.
    steps:
      - run:
          name: git clone
          command: |
            git clone https://github.com/mozilla/fxa . --depth=1
            git fetch https://github.com/mozilla/fxa << pipeline.git.revision >> --depth=2
            git checkout << pipeline.git.revision >>

  git-checkout:
    # Note: Since we use a pre-populated base image that has a .git folder already present (see
    # comment above), running a fetch and checkout saves a considerable amount of time when compared
    # to a circleci `- checkout` command.
    steps:
      - run:
          name: Checkout Branch
          command: |
            set +x
            # If the PR is coming from a fork, add it as a remote, so the commit can be checked out.
            if [[ "$CIRCLE_PR_USERNAME" != "" && "$CIRCLE_PR_REPONAME" != "" ]]; then
              echo "Adding remote https://github.com/$CIRCLE_PR_USERNAME/$CIRCLE_PR_REPONAME"
              git fetch https://github.com/$CIRCLE_PR_USERNAME/$CIRCLE_PR_REPONAME << pipeline.git.revision >> --depth=1
            else
              git fetch https://github.com/mozilla/fxa << pipeline.git.revision >> --depth=1
            fi

            git reset --hard
            git checkout << pipeline.git.revision >>

            commitsBehind=$(git rev-list --left-only --count main...HEAD);
            if [[ $((commitsBehind)) > 0 ]]; then

              if [[ $((commitsBehind)) == 1 ]]; then commits="commit"; else commits="commits"; fi;

              echo -e '\n\n'
              echo '=============================================================================='
              echo "WARNING! Your branch is $commitsBehind $commits behind master!"
              echo '------------------------------------------------------------------------------'
              echo 'Please consider rebasing. By not rebasing you always run the risk of'
              echo 'introducing a breaking change into main!'
              echo '=============================================================================='
              echo -e '\n\n'
            fi

  provision:
    # Note: We no longer cache in step. As long as packages used in the branch aren't that different
    # from the packages used in main, which is generally the case, we shouldn't see large install
    # times, since the base image will have pre cached.
    steps:
      - run:
          name: Base Install
          command: |
            ./_scripts/l10n/clone.sh
            ./.circleci/base-install.sh
            ./.circleci/create-lists.sh
            ./_scripts/create-version-json.sh
      - store_artifacts:
          path: ./packages/version.json
      - store_artifacts:
          path: ./.lists

  cache-save-yarn:
    steps:
      - save_cache:
          key: fxa-yarn-001-{{ checksum "yarn.lock" }}
          paths:
            - /home/circleci/.yarn
            - /home/circleci/project/.yarn

  cache-restore-yarn:
    steps:
      - restore_cache:
          keys:
            - fxa-yarn-001-{{ checksum "yarn.lock" }}
            - fxa-yarn-001-

  test-content-server-part:
    parameters:
      index:
        type: integer
      total:
        type: integer
    steps:
      - git-checkout
      - restore-workspace
      - wait-for-infrastructure
      - run:
          name: Start services for << parameters.index >> of << parameters.total >>
          command: packages/fxa-content-server/scripts/start-services.sh
      - run:
          name: Running test section << parameters.index >> of << parameters.total >>
          environment:
            CIRCLE_NODE_INDEX: << parameters.index >>
            CIRCLE_NODE_TOTAL: << parameters.total >>
          command: ./.circleci/test-package.sh fxa-content-server
      - store-artifacts

  test-content-server-remote-part:
    parameters:
      index:
        type: integer
      total:
        type: integer
    steps:
      - git-checkout
      - provision
      - run:
          name: Running test section << parameters.index >> of << parameters.total >>
          environment:
            CIRCLE_NODE_INDEX: << parameters.index >>
            CIRCLE_NODE_TOTAL: << parameters.total >>
          command: ./packages/fxa-content-server/scripts/test-ci-remote.sh
      - store-artifacts

  wait-for-infrastructure:
    steps:
      - run:
          name: Wait for MySQL DB
          command: ./_scripts/check-mysql.sh
      - run:
          name: Run DB migrations
          command: node ./packages/db-migrations/bin/patcher.mjs;
      - run:
          name: Wait for firestore
          command: ./_scripts/check-url.sh localhost:9090;

  lint:
    steps:
      - run:
          name: Linting
          command: ./.circleci/lint-packages.sh

  compile:
    steps:
      - run:
          name: Compiling TypeScript
          command: yarn workspaces foreach --topological-dev --verbose run compile

  report-coverage:
    # Not currently used. But should be soon once coverage reports are fixed up.
    parameters:
      list:
        type: string
        default: ''
    steps:
      - run:
          command: ./.circleci/report-coverage.sh << parameters.list >>

  store-artifacts:
    steps:
      - run:
          name: Ensure directories
          command: mkdir -p artifacts/tests && mkdir -p ~/.pm2/logs && mkdir -p ~/screenshots
      - store_artifacts:
          path: artifacts
      - store_artifacts:
          path: ~/screenshots
      - store_artifacts:
          path: ~/.pm2/logs
      - store_test_results:
          path: artifacts/tests

  ts-build:
    steps:
      - run:
          name: Build Common Typescript Packages
          command: ./.circleci/build-ts-packages.sh

  save-workspace:
    steps:
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .lists
            - external
            - node_modules
            - packages

  restore-workspace:
    steps:
      - attach_workspace:
          at: /home/circleci/project

  run-tests:
    parameters:
      test_name:
        type: string
      # Name of file in ./lists folder holding tests to execute in parallel
      list:
        type: string
      # Controls the number of parallel operations and essentially correlates to the --jobs argument of the
      # parallel command. A value of NONE, indicates the argument is not supplied at all.
      # For exact usage see:
      #   https://www.gnu.org/software/parallel/parallel_tutorial.html#number-of-simultaneous-jobs
      max_jobs:
        type: string
        default: "NONE"
      index:
        type: integer
        default: 0
      total:
        type: integer
        default: 1
    steps:
      - run:
          name: << parameters.test_name >>
          command: ./.circleci/run-list-parallel.sh  << parameters.list >> << parameters.max_jobs >> << parameters.index >>:<< parameters.total >>
      - store-artifacts

  fail-fast:
    steps:
      - run: sleep 10
      - run:
          name: Fail Fast
          when: on_fail
          command: |
            echo "Canceling workflow as a step resulted in failure"
            node .circleci/cancel-jobs.mjs;

  rebuild-check:
    parameters:
      force-deploy:
        type: boolean
    # If there are no changes on the lock file, we can skip the rebuild and exit early.
    steps:
      - run:
          name: Check if rebuild is needed
          command: |
            # If the lockfile has changed, we need a rebuild
            if [[ "<< parameters.force-deploy >>" == "true" ]]; then
              echo "Pipeline parameter force-deploy-fxa-ci-images set to true. Rebuilding docker images for CI.";
            elif [[ -n $(git diff HEAD~1 HEAD -- yarn.lock) ]]; then
              echo "Yarn lock has changes. Rebuilding docker images for CI!";
            else
              echo "No changes on yarn.lock. Skipping CI image rebuild.";
              circleci-agent step halt
            fi

  install-test-browsers:
    # Install browsers for content server testing. Once content server tests are complete, this can be removed.
    steps:
      - browser-tools/install-firefox:
          version: 102.4.0esr
      - browser-tools/install-geckodriver:
          version: v0.32.0

  build-ci-image:
    # Creates a docker image from the CI multistage build file.
    parameters:
      target:
        type: string
    steps:
      - run:
          name: Build << parameters.target >>
          command: |
            cd ..
            docker build . \
                -f ./project/_dev/docker/ci/Dockerfile \
                --target << parameters.target >> \
                -t mozilla/fxa-circleci:ci-<< parameters.target >>

  create-ci-images:
    # Build CI images. Images are built on top of each other. Each is optimized for a specific task.
    steps:
      - run:
          name: Prep yarn install
          command: cd .. && mkdir -p .yarn
      - build-ci-image:
          target: test-runner
      - build-ci-image:
          target: builder
      - run:
          name: Prep browser install
          command: |
            cd ..
            mkdir -p install
            cp -r /usr/local/bin/firefox* install/.
            cp -r /usr/local/bin/gecko* install/.
      - build-ci-image:
          target: functional-test-runner

      # Push images at the same time. Since these images are related, push them
      # in unison. Doing these operations in parallel cuts down on how expensive this
      # step is.
      - run:
          name: Push CI Images and Extract Yarn Cache
          command: |
            docker login -u $DOCKER_USER_fxa_circleci -p $DOCKER_PASS_fxa_circleci
            .circleci/copy-docker-cache.sh mozilla/fxa-circleci:ci-builder
            docker push mozilla/fxa-circleci:ci-test-runner
            docker push mozilla/fxa-circleci:ci-functional-test-runner
            docker push mozilla/fxa-circleci:ci-builder
            wait


jobs:

  # Does a production level build of FxA and produces docker images.
  deploy-packages:
    executor: docker-build-executor
    steps:
      - checkout
      - cache-restore-yarn
      - provision
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build docker images
          command: ./.circleci/build-all.sh
          no_output_timeout: 1h
      - run:
          name: Push to docker hub
          command: ./.circleci/deploy-all.sh
      - store-artifacts

  # This deploys docker images that are useful for CI testing. Think of this image as
  # the last known good build state of fxa. The images are designed to come to help spin
  # up jobs as quickly as possible.
  deploy-fxa-ci-images:
    parameters:
      executor:
        type: executor
      force-deploy:
        type: boolean
        default: false
    executor: << parameters.executor >>
    steps:
      # Run with layer caching to speed up builds
      - setup_remote_docker:
          docker_layer_caching: true
      - git-clone
      - rebuild-check:
          force-deploy: << pipeline.parameters.force-deploy-fxa-ci-images >>
      - install-test-browsers
      - cache-restore-yarn
      - create-ci-images
      - cache-save-yarn

  # The initial step for many pipelines, this step installs packages and does a build on
  # the code. It then stores the resulting state into a CircleCI workspace for later
  # use.
  build:
    executor: build-executor
    resource_class: large
    steps:
      - git-checkout
      - provision
      - ts-build
      - save-workspace

  # Runs linter on packages that have changes.
  lint:
    executor: default-executor
    resource_class: small
    steps:
      - git-checkout
      - restore-workspace
      - lint

  compile:
    executor: default-executor
    resource_class: medium
    steps:
      - git-checkout
      - restore-workspace
      - compile

  # Runs unit tests in parallel across packages with changes.
  unit-test:
    executor: default-executor
    resource_class: large
    steps:
      - git-checkout
      - restore-workspace
      - run-tests:
          test_name: Unit Test
          list: unit-test.list

  # Runs integration tests suites across packages with changes. Integration tests can take
  #  longer to run, so this job supports splitting.
  integration-test-part:
    parameters:
      resource_class:
        type: string
        default: medium
      index:
        type: integer
      total:
        type: integer
    executor: fullstack-executor
    steps:
      - git-checkout
      - restore-workspace
      - wait-for-infrastructure
      - run-tests:
          test_name: Integration Test (many)
          list: integration-test.list
          max_jobs: "1"
          index: << parameters.index >>
          total: << parameters.total >>

  # Runs a subset of content server's tests. These tests take longer to run,
  # so they are split into parts.
  test-content-server-part:
    parameters:
      resource_class:
        type: string
        default: large
      index:
        type: integer
      total:
        type: integer
    executor: functional-test-executor
    resource_class: << parameters.resource_class >>
    steps:
      - test-content-server-part:
          index: << parameters.index >>
          total: << parameters.total >>

  # This job is manually triggered for now. see .circleci/README.md
  test-content-server-remote:
    executor: smoke-test-executor
    steps:
      - git-checkout
      - provision
      - run:
          name: Running test section against a remote target
          command: ./packages/fxa-content-server/scripts/test-ci-remote.sh
      - store-artifacts

  # These jobs are manually triggered for now. see .circleci/README.md
  test-content-server-remote-part-0:
    executor: smoke-test-executor
    steps:
      - test-content-server-remote-part:
          index: 0
          total: 3
  test-content-server-remote-part-1:
    executor: smoke-test-executor
    steps:
      - test-content-server-remote-part:
          index: 1
          total: 3
  test-content-server-remote-part-2:
    executor: smoke-test-executor
    steps:
      - test-content-server-remote-part:
          index: 2
          total: 3

  # Deprecated - use workflows in conjunction with smoke-tests job instead!
  # This job is manually triggered for now. see .circleci/README.md
  production-smoke-tests:
    executor: smoke-test-executor
    steps:
      - git-checkout
      - provision
      - run:
          name: Running smoke tests
          command: yarn workspace functional-tests test-production
      - store-artifacts
      # TODO: Is this actually needed?
      - store_test_results:
          path: artifacts/tests

  smoke-tests:
    parameters:
      target:
        type: string
        default: test-production
    executor: smoke-test-executor
    steps:
      - git-checkout
      - provision
      - run:
          name: Running smoke tests
          command: yarn workspace functional-tests << parameters.target >>
      - store-artifacts

  # Runs functional tests using playwright. These tests support splitting
  # and parallel execution.
  playwright-functional-tests:
    parameters:
      resource_class:
        type: string
        default: large
      parallelism:
        type: integer
        default: 8
    executor: functional-test-executor
    resource_class: << parameters.resource_class >>
    parallelism: << parameters.parallelism >>
    steps:
      - git-checkout
      - restore-workspace
      - run:
          name: Add localhost
          command: |
            sudo tee -a /etc/hosts \<<<'127.0.0.1 localhost'
            sudo cat /etc/hosts
      - wait-for-infrastructure
      - run:
          name: Start services for playwright tests
          command: ./packages/functional-tests/scripts/start-services.sh
      - run:
          name: Running playwright tests
          command: ./packages/functional-tests/scripts/test-ci.sh
      - store-artifacts

  build-and-deploy-storybooks:
    executor: default-executor
    steps:
      - git-checkout
      - restore-workspace
      - run:
          name: Build and deploy Storybooks
          command: |
            STORYBOOKS_USE_YARN_WORKSPACES=false npx github:mozilla-fxa/storybook-gcp-publisher

  # A nice way to finalize a workflow. This will also notify jira.
  on-complete:
    parameters:
      stage:
        type: string
      job_type:
        type: string
    executor: tiny-executor
    steps:
      - run:
          name: "Stage completed"
          command: echo "<< parameters.stage >> completed!"
      - jira/notify:
          job_type: << parameters.job_type >>


workflows:

  test_pull_request:
    # This workflow is executed whenever a pull request is issued. It will also
    # run on PR drafts.
    when: << pipeline.parameters.enable_test_pull_request >>
    jobs:
      - build:
          name: Build (PR)
          filters:
            branches:
              ignore: /main/
            tags:
              ignore: /.*/
      - lint:
          name: Lint (PR)
          requires:
            - Build (PR)
      - compile:
          name: Compile (PR)
          requires:
            - Build (PR)
      - unit-test:
          name: Unit Test (PR)
          requires:
            - Build (PR)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 1 (PR)
          index: 0
          total: 6
          requires:
            - Build (PR)
      - integration-test-part:
          name: Integration Test 2 (PR)
          index: 1
          total: 6
          requires:
            - Build (PR)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 3 (PR)
          index: 2
          total: 6
          requires:
            - Build (PR)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 4 (PR)
          index: 3
          total: 6
          requires:
            - Build (PR)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 5 (PR)
          index: 4
          total: 6
          requires:
            - Build (PR)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 6 (PR)
          index: 5
          total: 6
          requires:
            - Build (PR)
          post-steps:
            - fail-fast
      - test-content-server-part:
          name: Functional Test - Content 1 (PR)
          index: 0
          total: 5
          requires:
            - Build (PR)
      - test-content-server-part:
          name: Functional Test - Content 2 (PR)
          index: 1
          total: 5
          requires:
            - Build (PR)
      - test-content-server-part:
          name: Functional Test - Content 3 (PR)
          index: 2
          total: 5
          requires:
            - Build (PR)
      - test-content-server-part:
          name: Functional Test - Content 4 (PR)
          index: 3
          total: 5
          requires:
            - Build (PR)
      - test-content-server-part:
          name: Functional Test - Content 5 (PR)
          index: 4
          total: 5
          requires:
            - Build (PR)
      - playwright-functional-tests:
          name: Functional Tests - Playwright (PR)
          resource_class: xlarge
          requires:
            - Build (PR)
      - build-and-deploy-storybooks:
          name: Deploy Storybooks (PR)
          requires:
            - Build (PR)
      - on-complete:
          name: Tests Complete (PR)
          stage: Tests
          job_type: build
          requires:
            - Lint (PR)
            - Compile (PR)
            - Unit Test (PR)
            - Integration Test 1 (PR)
            - Integration Test 2 (PR)
            - Integration Test 3 (PR)
            - Functional Test - Content 1 (PR)
            - Functional Test - Content 2 (PR)
            - Functional Test - Content 3 (PR)
            - Functional Test - Content 4 (PR)
            - Functional Test - Content 5 (PR)
            - Functional Tests - Playwright (PR)
            - Deploy Storybooks (PR)

  # Triggered remotely. See .circleci/README.md
  production_smoke_tests:
    when: << pipeline.parameters.enable_production_smoke_tests >>
    jobs:
      # Note that these target stage too! This might seem odd, but having tests pass on staging is currently
      # a requirement for all production deploys.
      - test-content-server-remote-part-0:
          name: Smoke Stage - Content Server Part 1
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - test-content-server-remote-part-1:
          name: Smoke Stage - Content Server Part 2
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - test-content-server-remote-part-2:
          name: Smoke Stage - Content Server Part 3
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - smoke-tests:
          name: Smoke Test Stage - Playwright
          target: test-stage
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - smoke-tests:
          name: Smoke Test Production - Playwright
          target: test-production
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/

  # Triggered remotely. See .circleci/README.md
  stage_smoke_tests:
    when: << pipeline.parameters.enable_stage_smoke_tests >>
    jobs:
      - test-content-server-remote-part-0:
          name: Smoke Test Stage - Content Server Part 1
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - test-content-server-remote-part-1:
          name: Smoke Test Stage - Content Server Part 2
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - test-content-server-remote-part-2:
          name: Smoke Test Stage - Content Server Part 3
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - smoke-tests:
          name: Smoke Test Stage - Playwright
          target: test-stage
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/

  deploy_packages:
    # This workflow can be triggered after a PR lands on main. It requires approval.
    # The same operation will eventually run nightly. The same operation will run nightly.
    when: << pipeline.parameters.enable_deploy_packages >>
    jobs:
      # Builds the monorepo for a production / stage deploy
      - request-deploy-packages:
          name: Request Deploy FxA Packages
          type: approval
          filters:
            branches:
              only:
                - main
                - /^feature.*/
                - /^dockerpush.*/
            tags:
              ignore: /.*/
      - deploy-packages:
          name: Deploy FxA Packages
          requires:
            - Request Deploy FxA Packages

  deploy_ci_images:
    # This workflow is triggered after a PR lands on main. The workflow will
    # short circuit if incoming PR doesn't modify any npm packages. The same
    # operation will run nightly.
    when: << pipeline.parameters.enable_deploy_ci_images >>
    jobs:
      - deploy-fxa-ci-images:
          name: Deploy CI Images
          executor:
            name: docker-build-executor
            image: cimg/node:18.14-browsers
          filters:
            branches:
              only:
                - main
            tags:
              ignore: /.*/

  deploy_story_book:
    # This workflow is triggered after a PR lands on main. It requires approval.
    # The same operation will eventually run nightly.
    when: << pipeline.parameters.enable_deploy_story_book >>
    jobs:
      - request-build-and-deploy-storybooks:
          name: Request Deploy Storybooks
          type: approval
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - build-and-deploy-storybooks:
          name: Deploy Storybooks
          requires:
            - Request Deploy Storybooks

  test_and_deploy_tag:
    # This workflow is used for building docker containers that are then deployed to
    # live infrastructure.
    when: << pipeline.parameters.enable_test_and_deploy_tag >>
    jobs:
      - build:
          name: Build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - lint:
          name: Lint
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - Build
      - compile:
          name: Compile
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - Build
      - unit-test:
          name: Unit Test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - Build
      - integration-test-part:
          name: Integration Test 1
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 0
          total: 3
          requires:
            - Build
      - integration-test-part:
          name: Integration Test 2
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 1
          total: 3
          requires:
            - Build
      - integration-test-part:
          name: Integration Test 3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 2
          total: 3
          requires:
            - Build
      - test-content-server-part:
          name: Functional Test - Content 1
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 0
          total: 5
          requires:
            - Build
      - test-content-server-part:
          name: Functional Test - Content 2
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 1
          total: 5
          requires:
            - Build
      - test-content-server-part:
          name: Functional Test - Content 3
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 2
          total: 5
          requires:
            - Build
      - test-content-server-part:
          name: Functional Test - Content 4
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 3
          total: 5
          requires:
            - Build
      - test-content-server-part:
          name: Functional Test - Content 5
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          index: 4
          total: 5
          requires:
            - Build
      - playwright-functional-tests:
          name: Functional Tests - Playwright
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - Build
      - deploy-packages:
          name: Deploy FXA
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - Lint
            - Compile
            - Unit Test
            - Integration Test 1
            - Integration Test 2
            - Integration Test 3
            - Functional Test - Content 1
            - Functional Test - Content 2
            - Functional Test - Content 3
            - Functional Test - Content 4
            - Functional Test - Content 5
            - Functional Tests - Playwright

  nightly:
    # This work flow runs a full build, test suite, and deployment of docker images nightly
    when: << pipeline.parameters.enable_nightly >>
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: main
    jobs:
      - build:
          name: Build (nightly)
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/
      - lint:
          name: Lint (nightly)
          requires:
            - Build (nightly)
      - compile:
          name: Compile (nightly)
          requires:
            - Build (nightly)
      - unit-test:
          name: Unit Test (nightly)
          requires:
            - Build (nightly)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 1 (nightly)
          index: 0
          total: 3
          requires:
            - Build (nightly)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 2 (nightly)
          index: 1
          total: 3
          requires:
            - Build (nightly)
          post-steps:
            - fail-fast
      - integration-test-part:
          name: Integration Test 3 (nightly)
          index: 2
          total: 3
          requires:
            - Build (nightly)
          post-steps:
            - fail-fast
      - playwright-functional-tests:
          name: Functional Tests - Playwright (nightly)
          requires:
            - Build (nightly)
      - on-complete:
          name: Tests Complete (nightly)
          stage: Tests (nightly)
          job_type: build
          requires:
            - Lint (nightly)
            - Compile (nightly)
            - Unit Test (nightly)
            - Integration Test 1 (nightly)
            - Integration Test 2 (nightly)
            - Integration Test 3 (nightly)
            - Functional Tests - Playwright (nightly)
      - build-and-deploy-storybooks:
          name: Deploy Storybooks (nightly)
          requires:
            - Tests Complete (nightly)
      - deploy-packages:
          name: Deploy FxA Packages (nightly)
          requires:
            - Tests Complete (nightly)
      - deploy-fxa-ci-images:
          name: Deploy CI Images (nightly)
          executor:
            name: docker-build-executor
            image: cimg/node:16.13-browsers
          # Note, setting force-deploy as true will result in rebuilding the images regardless
          # of whether or not there are package modifications.
          force-deploy: true
          requires:
            - Tests Complete (nightly)
