version: 2.1

parameters:
  docker-repo:
    type: string
    default: mozilla/fxa-circleci

orbs:
  browser-tools: circleci/browser-tools@1.2.3
  jira: circleci/jira@1.3.1

executors:

  # For creating docker builds
  docker-build-executor:
    parameters:
      resource_class:
        type: string
        default: medium
      image:
        type: string
        default: cimg/node:16.13
    resource_class: << parameters.resource_class >>
    docker:
      - image: << parameters.image >>
    environment:
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      # Note, the global cache is enabled, because otherwise two caches are created, one in .yarn/berry and one in .yarn/cache.
      # Turning this on results in a single cache - .yarn/berry
      YARN_ENABLE_GLOBAL_CACHE: true
      # Enabling hard links saves about 1.2 GB of space in the image.
      YARN_NM_MODE: hardlinks-global

  # For any thing that does need context, ie linting, building, unit testing, etc...
  default-executor:
    parameters:
      resource_class:
        type: string
        default: medium
    resource_class: << parameters.resource_class >>
    docker:
      - image: << pipeline.parameters.docker-repo >>:ci-base-latest
    environment:
      NODE_ENV: development
      FIRESTORE_EMULATOR_HOST: localhost:9090

  # For anything that needs a full stack to run
  fullstack-executor:
    parameters:
      resource_class:
        type: string
        default: medium+
    resource_class: << parameters.resource_class >>
    docker:
      - image: << pipeline.parameters.docker-repo >>:ci-base-latest
      - image: cimg/mysql:8.0.28
        command: --default-authentication-plugin=mysql_native_password
      - image: jdlk7/firestore-emulator
      - image: memcached
      - image: redis
    environment:
      NODE_ENV: development
      FIRESTORE_EMULATOR_HOST: localhost:9090

  # For anything that needs a full stack to run and needs browsers available for
  # ui test automation
  functional-test-executor:
    parameters:
      resource_class:
        type: string
        default: xlarge
    resource_class: << parameters.resource_class >>
    docker:
      - image: << pipeline.parameters.docker-repo >>:ci-base-browsers-latest
      - image: redis
      - image: memcached
      - image: pafortin/goaws
      - image: cimg/mysql:8.0.28
        command: --default-authentication-plugin=mysql_native_password
      - image: jdlk7/firestore-emulator
    environment:
      NODE_ENV: development
      FXA_EMAIL_ENV: development
      FXA_EMAIL_LOG_LEVEL: debug
      RUST_BACKTRACE: 1
      AUTH_FIRESTORE_EMULATOR_HOST: localhost:9090
      # Needed for sub plat playwright tests
      SUBSCRIPTIONS_PAYPAL_ENABLED: true
      PAYPAL_SANDBOX: true
      FXA_MX_RECORD_EXCLUSIONS: restmail.dev.lcip.org

  # For anything that needs browsers for ui automation, but doesn't need a full stack.
  # Perfect running smoke tests deployed code.
  smoke-test-executor:
    parameters:
      resource_class:
          type: string
          default: medium+
    resource_class: << parameters.resource_class >>
    docker:
      - image: << pipeline.parameters.docker-repo >>:ci-base-browsers-latest

commands:

  # Note: Cloning this way allows us to run a git fetch later on download the road. This type of
  # clone operation will result in a .git/config with no user attached that is using a
  # https://github.com/mozilla/fxa for the remote origin.
  git-clone:
    steps:
      - run: git clone https://github.com/mozilla/fxa .
      - run: git checkout << pipeline.git.revision >>

  # Note: Since we use a pre-populated base image that has a .git folder already present (see
  # comment above), running a fetch and checkout saves a considerable amount of time  when compared
  # to a circleci `- checkout` command.
  git-checkout:
    steps:
      - run: git fetch
      - run: git checkout << pipeline.git.revision >>

  # Note: We no longer cache in step. As long as packages used in the branch aren't that different
  # from the packages used in main, which is generally the case, we shouldn't see large install
  # times, since the base image will have everything cached.
  provision:
    steps:
      - run: ./.circleci/base-install.sh
      - run: node .circleci/modules-to-test.js | tee packages/test.list
      - run: ./_scripts/create-version-json.sh

  cache-save-yarn:
    steps:
      - save_cache:
          key: fxa-yarn-07-{{ checksum "yarn.lock" }}
          paths:
            - /home/circleci/.yarn/berry
            - /home/circleci/project/.yarn/build-state.yml
            - /home/circleci/project/.yarn/install-state.gzs

  cache-restore-yarn:
    steps:
      - restore_cache:
          keys:
            - fxa-yarn-07-{{ checksum "yarn.lock" }}
            - fxa-yarn-07-

  test-content-server-part:
    parameters:
      index:
        type: integer
        default: 0
      total:
        type: integer
        default: 3
    steps:
      - git-checkout
      - provision
      - wait-for-infrastructure
      - run:
          name: Running test section << parameters.index >> of << parameters.total >>
          environment:
            CIRCLE_NODE_INDEX: << parameters.index >>
            CIRCLE_NODE_TOTAL: << parameters.total >>
          command: ./.circleci/test-package.sh fxa-content-server
      - store_artifacts:
          path: ~/.pm2/logs
          destination: logs
      - store_artifacts:
          path: ~/screenshots
          destination: screenshots
      - store_test_results:
          path: artifacts/tests

  test-content-server-remote-part:
    parameters:
      index:
        type: integer
      total:
        type: integer
    steps:
      - git-checkout
      - provision
      - run:
          name: Running test section << parameters.index >> of << parameters.total >>
          environment:
            CIRCLE_NODE_INDEX: << parameters.index >>
            CIRCLE_NODE_TOTAL: << parameters.total >>
          command: ./packages/fxa-content-server/scripts/test-ci-remote.sh
      - store_artifacts:
          path: ~/.pm2/logs
          destination: logs
      - store_artifacts:
          path: ~/screenshots
          destination: screenshots
      - store_test_results:
          path: artifacts/tests

  test-settings-server:
    steps:
      - provision
      - run:
          name: Running test...
          command: ./.circleci/test-package.sh fxa-settings
      - store_artifacts:
          path: ~/.pm2/logs
          destination: logs
      - store_artifacts:
          path: ~/screenshots
          destination: screenshots
      - store_test_results:
          path: artifacts/tests

  wait-for-infrastructure:
    steps:
      - run:
          name: Wait for MySQL DB
          command: ./_scripts/check-mysql.sh

jobs:

  deploy-packages:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - cache-restore-yarn
      - provision
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker images
          command: ./.circleci/build-all.sh
          no_output_timeout: 1h
      - run:
          name: Push to docker hub
          command: ./.circleci/deploy-all.sh
      - store_artifacts:
          path: artifacts

  # This deploys a base image of fxa that is useful for CI testing. Think of this image as
  # the last known good state of fxa. The image is designed to come with everything required
  # to spin up tests pipelines quickly.
  deploy-fxa-ci-image:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - git-clone
      - cache-restore-yarn
      - run:
          name: Build docker fxa ci image
          command: docker build . -f ./_dev/docker/ci-base/Dockerfile -t ci-base-latest
      - deploy:
          name: Push fxa ci image
          command: |
            docker login -u $DOCKER_USER_fxa_circleci -p $DOCKER_PASS_fxa_circleci
            docker tag ci-base-latest << pipeline.parameters.docker-repo >>:ci-base-latest
            docker push << pipeline.parameters.docker-repo >>:ci-base-latest

  # This deploys another base image. It's built on top of the image produced above. This
  # image has all the libraries needed for running UI tests automation in headless browsers.
  deploy-fxa-ci-browser-image:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - browser-tools/install-firefox:
          version: 102.4.0esr
      - browser-tools/install-geckodriver:
          version: v0.32.0
      - git-clone
      - cache-restore-yarn
      # Copies the browsers the browsers that were installed above into a location accessible to the
      # docker build.
      - run: mkdir -p /home/circleci/project/install
      - run: cp -r /usr/local/bin/firefox* /home/circleci/project/install/.
      - run: cp -r /usr/local/bin/gecko* /home/circleci/project/install/.
      - run:
          name: Build docker fxa ci image
          command: docker build . -f ./_dev/docker/ci-browsers/Dockerfile -t ci-base-browsers-latest
      - deploy:
          name: Push fxa ci image
          command: |
            docker login -u $DOCKER_USER_fxa_circleci -p $DOCKER_PASS_fxa_circleci
            docker tag ci-base-browsers-latest << pipeline.parameters.docker-repo >>:ci-base-browsers-latest
            docker push << pipeline.parameters.docker-repo >>:ci-base-browsers-latest

  test-package:
    executor: fullstack-executor
    parameters:
      package:
        type: string
    steps:
      - git-checkout
      - provision
      - wait-for-infrastructure
      - run:
          name: Testing << parameters.package >>
          command: ./.circleci/test-package.sh << parameters.package >>
      - store_test_results:
          path: artifacts/tests
      - run:
          name: Reporting code coverage...
          command: bash <(curl -s https://codecov.io/bash) -F << parameters.package >> -X gcov

  lint:
    executor: default-executor
    steps:
      - git-checkout
      - run:
          name: Linting
          command: |
            PACKAGES=(\
            'fxa-shared' \
            'fxa-auth-server' \
            )
            for p in "${PACKAGES[@]}"; do
              (cd packages/$p && yarn lint)
            done
      - jira/notify

  test-many:
    executor: fullstack-executor
    steps:
      - git-checkout
      - provision
      - wait-for-infrastructure
      - run:
          name: Testing...
          command: |
            PACKAGES=(\
            'fxa-shared' \
            'fxa-react' \
            'fxa-graphql-api' \
            'fxa-payments-server' \
            'fxa-admin-server' \
            'fxa-admin-panel' \
            'fxa-support-panel' \
            'fxa-event-broker' \
            'fxa-profile-server' \
            '123done' \
            'browserid-verifier' \
            'fortress' \
            'fxa-auth-client' \
            'fxa-geodb' \
            'fxa-customs-server' \
            )
            for p in "${PACKAGES[@]}"; do
              ./.circleci/test-package.sh $p
            done
      - run:
          name: Reporting code coverage...
          command: bash <(curl -s https://codecov.io/bash) -F many -X gcov
      - store_artifacts:
          path: artifacts
      - jira/notify

  test-settings-server:
    executor: functional-test-executor
    steps:
      - git-checkout
      - provision
      - wait-for-infrastructure
      - test-settings-server

  test-content-server-0:
    executor: functional-test-executor
    steps:
      - test-content-server-part:
          index: 0

  test-content-server-1:
    executor: functional-test-executor
    steps:
      - test-content-server-part:
          index: 1

  test-content-server-2:
    executor: functional-test-executor
    steps:
      - test-content-server-part:
          index: 2

  # This job is manually triggered for now. see .circleci/README.md
  test-content-server-remote:
    executor: smoke-test-executor
    steps:
      - git-checkout
      - provision
      - run:
          name: Running test section against a remote target
          command: ./packages/fxa-content-server/scripts/test-ci-remote.sh
      - store_artifacts:
          path: ~/screenshots
          destination: screenshots
      - store_test_results:
          path: artifacts/tests

  # These jobs are manually triggered for now. see .circleci/README.md
  test-content-server-remote-part-0:
    executor: smoke-test-executor
    steps:
      - test-content-server-remote-part:
          index: 0
          total: 3
  test-content-server-remote-part-1:
    executor: smoke-test-executor
    steps:
      - test-content-server-remote-part:
          index: 1
          total: 3
  test-content-server-remote-part-2:
    executor: smoke-test-executor
    steps:
      - test-content-server-remote-part:
          index: 2
          total: 3

  # This job is manually triggered for now. see .circleci/README.md
  production-smoke-tests:
    executor: smoke-test-executor
    steps:
      - git-checkout
      - provision
      - run:
          name: Running smoke tests
          command: yarn workspace functional-tests test-production
      - store_artifacts:
          path: artifacts
      - store_test_results:
          path: artifacts/tests

  playwright-functional-tests:
    executor: functional-test-executor
    parallelism: 5
    steps:
      - git-checkout
      - provision
      - run:
          name: Ensure playwright install
          # The base install script always skips playwright browser installs in an attempt
          # to be more efficient. When the lockfile has drifted, we may need to install
          # playwright again in order to ensure the expected browser version is present. If
          # the expected version is present, this should be pretty fast. If it is not it will
          # take a moment to install the browsers.
          command: |
            if ! cmp --silent yarn.lock yarn.lock.base; then npx playwright install; fi;
      - run:
          name: Add localhost
          command: |
            sudo tee -a /etc/hosts \<<<'127.0.0.1 localhost'
            sudo cat /etc/hosts
      - wait-for-infrastructure
      - run:
          name: Running playwright tests
          command: ./packages/functional-tests/scripts/test-ci.sh
      - store_artifacts:
          path: ~/.pm2/logs
          destination: logs
      - store_artifacts:
          path: artifacts
      - store_test_results:
          path: artifacts/tests

  build-and-deploy-storybooks:
    executor: default-executor
    steps:
      - git-checkout
      - provision
      - run:
          name: Build and deploy Storybooks
          command: npx github:mozilla-fxa/storybook-gcp-publisher

  update-yarn-cache:
    executor: default-executor
    steps:
      - cache-save-yarn


workflows:

  test_pull_request:
    jobs:
      - lint:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

      - test-many:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

      - test-settings-server:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

      - test-package:
          name: test-auth-server
          package: fxa-auth-server
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

      - test-content-server-0:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - test-content-server-1:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - test-content-server-2:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - playwright-functional-tests:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

      - build-and-deploy-storybooks:
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  # This workflow can be useful if we want to run test changes in our functional tests
  # against deployed code. Simply prefix a branch with run-smoke-tests, and issue a PR.
  smoke_test:
    jobs:
      - request-production-smoke-tests:
          type: approval
          filters:
            branches:
              only: /^run-smoke-tests-.*/
            tags:
              ignore: /.*/
      - production-smoke-tests:
          requires:
            - request-production-smoke-tests

      - request-test-content-server-remote:
          type: approval
          filters:
            branches:
              only: /^run-smoke-tests-.*/
            tags:
              ignore: /.*/
      - test-content-server-remote:
          requires:
            - request-test-content-server-remote

      - request-test-content-server-remote-parts:
          type: approval
          filters:
            branches:
              only: /^run-smoke-tests-.*/
            tags:
              ignore: /.*/
      - test-content-server-remote-part-0:
          requires:
            - request-test-content-server-remote-parts
      - test-content-server-remote-part-1:
          requires:
            - request-test-content-server-remote-parts
      - test-content-server-remote-part-2:
          requires:
            - request-test-content-server-remote-parts

  deploy_branch:
    jobs:
      - deploy-packages:
          executor: docker-build-executor
          filters:
            branches:
              only:
                - main
                - /^feature.*/
                - /^dockerpush.*/
            tags:
              ignore: /.*/

      - deploy-fxa-ci-image:
          executor: docker-build-executor
          filters:
            branches:
              only:
                - main
            tags:
              ignore: /.*/

      - deploy-fxa-ci-browser-image:
          requires:
            - deploy-fxa-ci-image
          executor:
            name: docker-build-executor
            image: cimg/node:16.13-browsers

      - build-and-deploy-storybooks:
          requires:
            - deploy-fxa-ci-image

      # Once the base image is deployed, go ahead and cache the yarn's state. This will save
      # us some time on the next build
      - update-yarn-cache:
          requires:
            - deploy-fxa-ci-image

  test_and_deploy_tag:
    jobs:
      - lint:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - test-many:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - test-package:
          name: test-auth-server
          package: fxa-auth-server
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - test-content-server-0:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - test-content-server-1:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - test-content-server-2:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy-packages:
          executor: docker-build-executor
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          requires:
            - test-many
            - test-auth-server
            - test-content-server-0
            - test-content-server-1
            - test-content-server-2
